#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞

# –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_DIR="$(dirname "$SCRIPT_DIR")"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f "$BACKEND_DIR/.env" ]; then
    export $(cat "$BACKEND_DIR/.env" | grep -v '^#' | xargs)
fi

BACKUP_DIR="$BACKEND_DIR/backups"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
if [ -z "$1" ]; then
    echo "Usage: $0 <backup_file>"
    echo ""
    echo "Available backups:"
    ls -lh "$BACKUP_DIR"/*.sql.gz 2>/dev/null || echo "No backups found"
    exit 1
fi

BACKUP_FILE="$1"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if [ ! -f "$BACKUP_FILE" ]; then
    echo "Error: Backup file not found: $BACKUP_FILE"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ backup-db.sh)
DB_TYPE="unknown"
SQLITE_DB=""

echo "üîç Detecting database type..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQLite —Ñ–∞–π–ª–æ–≤
for db_file in "$BACKEND_DIR"/*.sqlite* "$BACKEND_DIR"/*.db "$BACKEND_DIR/data"/*.sqlite* "$BACKEND_DIR/database"/*.sqlite*; do
    if [ -f "$db_file" ] && [ -s "$db_file" ]; then
        SQLITE_DB="$db_file"
        DB_TYPE="sqlite"
        echo "‚úÖ Found SQLite database: $db_file"
        break
    fi
done

# SQLite –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
if [ "$DB_TYPE" = "sqlite" ]; then
    echo ""
    echo "‚ö†Ô∏è  WARNING: This will OVERWRITE the SQLite database: $SQLITE_DB"
    echo "üì¶ Backup file: $BACKUP_FILE"
    read -p "Are you sure you want to continue? (yes/no): " CONFIRM

    if [ "$CONFIRM" != "yes" ]; then
        echo "Restore cancelled"
        exit 0
    fi

    echo ""
    echo "üíæ Restoring SQLite database..."

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    CURRENT_BACKUP="$SQLITE_DB.before_restore_$(date +%Y%m%d_%H%M%S)"
    echo "üìã Creating safety backup: $CURRENT_BACKUP"
    cp "$SQLITE_DB" "$CURRENT_BACKUP"

    if ! command -v sqlite3 &> /dev/null; then
        echo "‚ö†Ô∏è  sqlite3 not found, using file copy"

        # –ï—Å–ª–∏ –±—ç–∫–∞–ø —Å–∂–∞—Ç
        if [[ "$BACKUP_FILE" == *.gz ]]; then
            echo "Decompressing backup file..."
            gunzip -c "$BACKUP_FILE" > "$SQLITE_DB"
        else
            cp "$BACKUP_FILE" "$SQLITE_DB"
        fi
    else
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sqlite3
        if [[ "$BACKUP_FILE" == *.gz ]]; then
            echo "Decompressing and restoring..."
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∑ –¥–∞–º–ø–∞
            rm -f "$SQLITE_DB"
            gunzip -c "$BACKUP_FILE" | sqlite3 "$SQLITE_DB"
        else
            rm -f "$SQLITE_DB"
            sqlite3 "$SQLITE_DB" < "$BACKUP_FILE"
        fi
    fi

    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Database restored successfully!"
        echo "üìÅ Restored to: $SQLITE_DB"
        echo "üîí Safety backup saved at: $CURRENT_BACKUP"
        echo ""
        echo "üí° If something went wrong, restore the safety backup:"
        echo "   cp $CURRENT_BACKUP $SQLITE_DB"
    else
        echo ""
        echo "‚ùå Restore failed!"
        echo "üîÑ Restoring from safety backup..."
        cp "$CURRENT_BACKUP" "$SQLITE_DB"
        echo "‚úÖ Original database restored"
        exit 1
    fi

# PostgreSQL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
else
    echo "üêò Using PostgreSQL database"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    DB_HOST=${DB_HOST:-localhost}
    DB_PORT=${DB_PORT:-5432}
    DB_NAME=${DB_NAME:-rent_admin}
    DB_USER=${DB_USER:-postgres}

    echo ""
    echo "‚ö†Ô∏è  WARNING: This will DROP and RECREATE the database: $DB_NAME"
    echo "üì¶ Backup file: $BACKUP_FILE"
    read -p "Are you sure you want to continue? (yes/no): " CONFIRM

    if [ "$CONFIRM" != "yes" ]; then
        echo "Restore cancelled"
        exit 0
    fi

    echo ""
    echo "Restoring database from backup..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –≤ Docker
    DOCKER_CONTAINER=$(docker ps --filter "name=postgres" --filter "status=running" -q | head -n 1)

    if [ ! -z "$DOCKER_CONTAINER" ]; then
        echo "üì¶ Using Docker container: $DOCKER_CONTAINER"
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Docker
        if [[ "$BACKUP_FILE" == *.gz ]]; then
            echo "Decompressing backup file..."
            gunzip -c "$BACKUP_FILE" | docker exec -i $DOCKER_CONTAINER psql -U $DB_USER -d $DB_NAME
        else
            docker exec -i $DOCKER_CONTAINER psql -U $DB_USER -d $DB_NAME < "$BACKUP_FILE"
        fi
    else
        echo "üîå Using direct PostgreSQL connection"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è psql
        if ! command -v psql &> /dev/null; then
            echo "‚ùå Error: psql not found!"
            echo ""
            echo "Please install PostgreSQL client tools:"
            echo "  Ubuntu/Debian: sudo apt install postgresql-client"
            echo "  MacOS: brew install postgresql"
            echo ""
            exit 1
        fi

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if [[ "$BACKUP_FILE" == *.gz ]]; then
            echo "Decompressing backup file..."
            gunzip -c "$BACKUP_FILE" | PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME
        else
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME < "$BACKUP_FILE"
        fi
    fi

    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Database restored successfully!"
    else
        echo ""
        echo "‚ùå Restore failed!"
        exit 1
    fi
fi
