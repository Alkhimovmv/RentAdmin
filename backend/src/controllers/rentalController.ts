import { Request, Response } from 'express';
import db from '@/utils/database';
import { Rental, CreateRentalDto, UpdateRentalDto, RentalWithEquipment, RentalStatus } from '@/models/types';
import { createRecord, updateRecord } from '@/utils/dbHelpers';

export class RentalController {
  async getAll(req: Request, res: Response): Promise<void> {
    try {
      const equipment = await db('equipment').select('*');
      const rawRentals = await db('rentals').select('*').orderBy('start_date', 'desc');

      console.log('üîç RentalController.getAll - Equipment count:', equipment.length);
      console.log('üîç RentalController.getAll - Raw rentals count:', rawRentals.length);
      if (rawRentals.length > 0) {
        console.log('üîç RentalController.getAll - First rental:', rawRentals[0]);
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
      const rentalEquipmentLinks = await db('rental_equipment').select('*');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–µ–Ω–¥—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const rentalsWithEquipment = rawRentals.map(rental => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∏ –≤ rental_equipment
        const equipmentLinks = rentalEquipmentLinks.filter(link => link.rental_id === rental.id);

        if (equipmentLinks.length > 0) {
          // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
          const equipment_list = equipmentLinks.map(link => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ (4001 -> 4)
            const realEquipmentId = link.equipment_id > 1000
              ? Math.floor(link.equipment_id / 1000)
              : link.equipment_id;

            const eq = equipment.find(e => e.id === realEquipmentId);

            if (eq) {
              if (link.equipment_id > 1000) {
                const instanceNumber = link.equipment_id % 1000;
                return { id: link.equipment_id, name: `${eq.name} ‚Ññ${instanceNumber}` };
              }
              return { id: link.equipment_id, name: eq.name };
            }

            return { id: link.equipment_id, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ' };
          });

          const equipment_name = equipment_list.map(e => e.name).join(', ');

          return {
            ...rental,
            equipment_name,
            equipment_list
          };
        }

        // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        const realEquipmentId = rental.equipment_id > 1000
          ? Math.floor(rental.equipment_id / 1000)
          : rental.equipment_id;

        const baseEquipment = equipment.find(eq => eq.id === realEquipmentId);

        let equipment_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
        if (baseEquipment) {
          if (rental.equipment_id > 1000) {
            const instanceNumber = rental.equipment_id % 1000;
            equipment_name = `${baseEquipment.name} ‚Ññ${instanceNumber}`;
          } else {
            equipment_name = baseEquipment.name;
          }
        }

        return {
          ...rental,
          equipment_name
        };
      });

      const rentalsWithStatus = rentalsWithEquipment.map(rental => ({
        ...rental,
        status: this.calculateStatus(rental)
      }));

      res.json(rentalsWithStatus);
    } catch (error) {
      console.error('Error getting rentals:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥' });
    }
  }

  async getById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const rental: RentalWithEquipment | undefined = await db('rentals')
        .join('equipment', 'rentals.equipment_id', 'equipment.id')
        .select(
          'rentals.*',
          'equipment.name as equipment_name'
        )
        .where('rentals.id', id)
        .first();

      if (!rental) {
        res.status(404).json({ error: '–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }

      rental.status = this.calculateStatus(rental);
      res.json(rental);
    } catch (error) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã' });
    }
  }

  async create(req: Request, res: Response): Promise<void> {
    try {
      const rentalData: CreateRentalDto = req.body;
      console.log('üéØ RentalController.create - Creating rental with data:', rentalData);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–∞—Å—Å–∏–≤ equipment_ids, —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞—Ä–µ–Ω–¥—É
      if (rentalData.equipment_ids && rentalData.equipment_ids.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∞—Ä–µ–Ω–¥—É
        const baseRentalData = { ...rentalData };
        delete baseRentalData.equipment_ids;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        baseRentalData.equipment_id = rentalData.equipment_ids[0];

        const rental = await createRecord<Rental>('rentals', baseRentalData);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        const rentalEquipmentRecords = rentalData.equipment_ids.map(equipmentId => ({
          rental_id: rental.id,
          equipment_id: equipmentId
        }));

        await db('rental_equipment').insert(rentalEquipmentRecords);
        console.log('‚úÖ RentalController.create - Multiple equipment rental created:', rental.id);

        res.status(201).json(rental);
      } else {
        // –û–±—ã—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ —Å –æ–¥–Ω–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        const rental = await createRecord<Rental>('rentals', rentalData);
        console.log('‚úÖ RentalController.create - Rental created successfully:', rental);

        res.status(201).json(rental);
      }
    } catch (error) {
      console.error('‚ùå Rental create error:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã' });
    }
  }

  async update(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const updateData: UpdateRentalDto = req.body;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–∞—Å—Å–∏–≤ equipment_ids, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
      if (updateData.equipment_ids && updateData.equipment_ids.length > 0) {
        const baseUpdateData = { ...updateData };
        delete baseUpdateData.equipment_ids;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        baseUpdateData.equipment_id = updateData.equipment_ids[0];

        const rental = await updateRecord<Rental>('rentals', id, baseUpdateData);

        if (!rental) {
          res.status(404).json({ error: '–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
          return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
        await db('rental_equipment').where('rental_id', id).del();

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
        const rentalEquipmentRecords = updateData.equipment_ids.map(equipmentId => ({
          rental_id: Number(id),
          equipment_id: equipmentId
        }));

        await db('rental_equipment').insert(rentalEquipmentRecords);
        console.log('‚úÖ RentalController.update - Multiple equipment rental updated:', id);

        res.json(rental);
      } else {
        const rental = await updateRecord<Rental>('rentals', id, updateData);

        if (!rental) {
          res.status(404).json({ error: '–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
          return;
        }

        res.json(rental);
      }
    } catch (error) {
      console.error('Rental update error:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã' });
    }
  }

  async delete(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const deletedCount = await db('rentals').where('id', id).del();

      if (deletedCount === 0) {
        res.status(404).json({ error: '–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }

      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã' });
    }
  }

  async getGanttData(req: Request, res: Response): Promise<void> {
    try {
      const { startDate, endDate } = req.query;

      const equipment = await db('equipment').select('*');

      let query = db('rentals').select('*');

      if (startDate && endDate) {
        query = query.whereRaw(
          'start_date <= ? AND end_date >= ?',
          [endDate, startDate]
        );
      }

      const ganttRentals = await query.orderBy('start_date');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
      const rentalEquipmentLinks = await db('rental_equipment').select('*');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ - –∫–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å—å—é
      const ganttData: any[] = [];

      ganttRentals.forEach(rental => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∏ –≤ rental_equipment
        const equipmentLinks = rentalEquipmentLinks.filter(link => link.rental_id === rental.id);

        if (equipmentLinks.length > 0) {
          // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã
          equipmentLinks.forEach(link => {
            const realEquipmentId = link.equipment_id > 1000
              ? Math.floor(link.equipment_id / 1000)
              : link.equipment_id;

            const eq = equipment.find(e => e.id === realEquipmentId);

            let equipment_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
            if (eq) {
              if (link.equipment_id > 1000) {
                const instanceNumber = link.equipment_id % 1000;
                equipment_name = `${eq.name} ‚Ññ${instanceNumber}`;
              } else {
                equipment_name = eq.name;
              }
            }

            ganttData.push({
              ...rental,
              equipment_id: link.equipment_id,
              equipment_name,
              status: this.calculateStatus(rental)
            });
          });
        } else {
          // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
          const realEquipmentId = rental.equipment_id > 1000
            ? Math.floor(rental.equipment_id / 1000)
            : rental.equipment_id;

          const baseEquipment = equipment.find(eq => eq.id === realEquipmentId);

          let equipment_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
          if (baseEquipment) {
            if (rental.equipment_id > 1000) {
              const instanceNumber = rental.equipment_id % 1000;
              equipment_name = `${baseEquipment.name} ‚Ññ${instanceNumber}`;
            } else {
              equipment_name = baseEquipment.name;
            }
          }

          ganttData.push({
            ...rental,
            equipment_name,
            status: this.calculateStatus(rental)
          });
        }
      });

      res.json(ganttData);
    } catch (error) {
      console.error('Error getting Gantt data:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞' });
    }
  }

  private calculateStatus(rental: Rental): RentalStatus {
    const now = new Date();
    const endDate = new Date(rental.end_date);
    const startDate = new Date(rental.start_date);

    if (rental.status === 'completed') {
      return 'completed';
    }

    if (now > endDate) {
      return 'overdue';
    }

    if (now >= startDate && now <= endDate) {
      return 'active';
    }

    return 'pending';
  }
}