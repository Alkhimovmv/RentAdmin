version: '3.8'

services:
  # PostgreSQL database
  database:
    image: postgres:15-alpine
    container_name: rent-admin-db
    environment:
      POSTGRES_DB: rent_admin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rent-admin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rent_admin"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rent-admin-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: rent_admin
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: super-secret-jwt-key-for-rent-admin-2024
      PIN_CODE: 20031997
      # Разрешаем доступ с любых доменов для фронтенда на том же сервере
      CORS_ORIGIN: "*"
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rent-admin-network
    volumes:
      - ./backend/src/migrations:/app/src/migrations
      - ./backend/src/seeds:/app/src/seeds
    command: sh -c "sleep 15 && npm run db:migrate && npm start"
    restart: unless-stopped

  # Nginx reverse proxy + Frontend
  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    container_name: rent-admin-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-fullstack.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - rent-admin-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  rent-admin-network:
    driver: bridge