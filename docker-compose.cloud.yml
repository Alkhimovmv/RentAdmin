version: '3.8'

services:
  # PostgreSQL база данных
  database:
    image: postgres:15-alpine
    container_name: rent-admin-db-cloud
    environment:
      POSTGRES_DB: ${DB_NAME:-rent_admin}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - rent-admin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rent-admin-backend-cloud
    environment:
      NODE_ENV: production
      PORT: ${API_PORT:-3001}
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rent_admin}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      PIN_CODE: ${PIN_CODE:-20031997}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rent-admin-network
    volumes:
      # Только для логов, если нужно
      - ./logs:/app/logs
    # Запускаем миграции и затем сервер
    command: sh -c "npm run db:migrate && npm start"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx для проксирования и SSL
  nginx:
    image: nginx:alpine
    container_name: rent-admin-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - rent-admin-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  rent-admin-network:
    driver: bridge